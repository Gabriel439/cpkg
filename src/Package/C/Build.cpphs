module Package.C.Build ( buildCPkg
                       ) where

import           Control.Concurrent     (getNumCapabilities)
import           Control.Monad.IO.Class (MonadIO (liftIO))
import           Data.Foldable          (traverse_)
import           Package.C.Build.OS
import           Package.C.Fetch
import           Package.C.Monad
import           Package.C.Type
import           System.Directory
import           System.FilePath        ((</>))
import           System.IO.Temp         (withSystemTempDirectory)
import           System.Process
import           System.Process.Ext
import           Package.C.Db.Register

#ifdef mingw32_HOST_OS
mkExecutable :: FilePath -> IO ()
mkExecutable = mempty
#else
mkExecutable :: FilePath -> IO ()
mkExecutable fp = do
    perms <- getPermissions fp
    setPermissions fp (setOwnerExecutable True perms)
#endif

envVarSplit :: EnvVar -> (String, String)

envVarSplit (EnvVar ev x) = (ev, x)

stepToProc :: FilePath -- ^ Package directory
           -> Command
           -> PkgM ()
stepToProc fp (Call p as envs dir') = do
    let dir'' = maybe fp (fp </>) dir'
    putDiagnostic ("Running " ++ p ++ " with arguments " ++ unwords as ++ " in directory " ++ dir'')
    waitProcess $ (proc p as) { cwd = Just dir'', std_in = CreatePipe, env = fmap envVarSplit <$> envs }
stepToProc dir' (MakeExecutable fp) = do
    putDiagnostic ("Marking " ++ (dir' </> fp) ++ " as executable...")
    liftIO $ mkExecutable (dir' </> fp)
stepToProc dir' (CreateDirectory d) = do
    putDiagnostic ("Creating directory " ++ (dir' </> d) ++ "...")
    liftIO $ createDirectoryIfMissing True (dir' </> d)

processSteps :: (Traversable t) => FilePath -> t Command -> PkgM ()
processSteps pkgDir = traverse_ (stepToProc pkgDir)

configureInDir :: CPkg -> FilePath -> FilePath -> PkgM ()
configureInDir cpkg pkgDir p =

    let cfg = ConfigureVars pkgDir Nothing [] dhallOS
        steps = configureCommand cpkg cfg
    in
        putNormal ("Configuring " ++ pkgName cpkg) *>
        processSteps p steps

buildInDir :: CPkg -> FilePath -> PkgM ()
buildInDir cpkg p = do
    nproc <- liftIO getNumCapabilities
    putNormal ("Building " ++ pkgName cpkg)
    let cfg = BuildVars nproc dhallOS
    processSteps p (buildCommand cpkg cfg)

installInDir :: CPkg -> FilePath -> PkgM ()
installInDir cpkg p =
    putNormal ("Installing " ++ pkgName cpkg) *>
    processSteps p (installCommand cpkg (InstallVars dhallOS))

fetchCPkg :: CPkg
          -> FilePath -- ^ Directory for intermediate build files
          -> PkgM ()
fetchCPkg cpkg = fetchUrl (pkgUrl cpkg) (pkgName cpkg)

-- diagnosticDirectory :: String -> (FilePath -> m a) -> m a
-- diagnosticDirectory s f = f (s ++ "-diagnostic")

-- TODO: more complicated solver, garbage collector, and all that.
-- Basically nix-style builds for C libraries
--
-- TODO: play nicely with cross-compilation (lol)
buildCPkg :: CPkg -> PkgM ()
buildCPkg cpkg = do

    pkgDir <- cPkgToDir cpkg

    liftIO $ createDirectoryIfMissing True pkgDir

    withSystemTempDirectory "cpkg" $ \p -> do

        putDiagnostic ("Setting up temporary directory in " ++ p)

        fetchCPkg cpkg p

        let p' = p </> pkgSubdir cpkg

        configureInDir cpkg pkgDir p'

        buildInDir cpkg p'

        installInDir cpkg p'

        registerPkg cpkg
